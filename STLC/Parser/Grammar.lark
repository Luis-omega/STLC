SPACES : / |\n/+
%ignore SPACES

// Python re doesn't match "\n" by defect when using `.`
COMMENT_REST_OF_LINE: /#[^\n]*/

%ignore COMMENT_REST_OF_LINE


TRUE.2 : "True"
FALSE.2 : "False"

INT_LITERAL.2 : /-?[1-9][0-9_]*/  | /0[0_]*/

BOOL : "Bool"
INT_TYPE : "Int" 
UNIT_TYPE : "Unit"

IF.2 : "if"
THEN.2 : "then"
ELSE.2 : "else"

LAMBDA : "\\"

VARIABLE_CHARACTER: /[a-zA-Z_]/
VARIABLE : VARIABLE_CHARACTER+

ARROW : "->"
COLON : ":"
SEMICOLON  : ";"
EQUAL : "="
LPAREN : "("
RPAREN : ")"

PLUS : "+"
MINUS : "-"
STAR : "*"
DIV :"/"
LE: "<"
GE: ">"
LEQ.2 : "<=" 
GEQ.2 : ">="
CMP.2 : "=="
NEQ.2 : "/="
AND : "&"
OR : "|"
NOT : "~"


variable : VARIABLE


expression_atom : variable -> expression_atom_variable
  | INT_LITERAL  -> expression_atom_int
  | TRUE -> expression_atom_true
  | FALSE -> expression_atom_false 
  | LAMBDA variable ARROW _expression -> expression_atom_lambda
  | IF _expression THEN _expression ELSE _expression -> expression_atom_if
  | LPAREN _expression RPAREN -> expression_atom_parens
  | LPAREN _expression COLON _type RPAREN -> expression_atom_annotation

expression_application : expression_atom -> expression_application_single
  | expression_atom expression_atom+

_expression_operator{operators,next_expression}: next_expression (operators next_expression)+
  | next_expression

_multiplicative_operators: DIV | STAR

_expression_multiplicative: _expression_operator{_multiplicative_operators,expression_application}

_additive_operators: PLUS | MINUS

_expression_additive: _expression_operator{_additive_operators, _expression_multiplicative}

// This one has to be done by hand to forbid multiple uses of 
// comparation operators at parsing time
_order_operators : LEQ | GEQ | LE | GE
_expression_order : _expression_additive _order_operators _expression_additive
  | _expression_additive


_comparative_operators: CMP | NEQ
_expression_comparative : _expression_operator{_comparative_operators, _expression_order}

_expression_not :  _expression_operator{NOT,_expression_comparative}

_expression_and : _expression_operator{AND, _expression_not}

_expression_or : _expression_operator{OR,_expression_and}

_expression : _expression_or

type_arrow : _type ARROW _type

type_parens: LPAREN _type RPAREN

type_bool: BOOL

type_int: INT_TYPE

type_unit: UNIT_TYPE

_type : type_bool | type_int | type_unit | type_parens | type_arrow

variable_declaration : variable COLON _type SEMICOLON

variables : variable+

variable_definition : variable EQUAL _expression SEMICOLON -> variable_definition_alone
  | variable variables EQUAL _expression SEMICOLON

top : (variable_declaration | variable_definition)*
