SPACES : / |\n/+
%ignore SPACES

// Python re doesn't match "\n" by defect when using `.`
COMMENT_REST_OF_LINE: /#[^\n]*/

%ignore COMMENT_REST_OF_LINE


TRUE : "True"
FALSE : "False"

INT_LITERAL.2 : /-?[1-9][0-9_]*/ 

BOOL : "Bool"
INT_TYPE : "Int" 
UNIT_TYPE : "Unit"

IF : "if"
THEN : "then"
ELSE : "else"

LAMBDA : "\\"

VARIABLE_CHARACTER: /[a-zA-Z_]/

ARROW : "->"
COLON : ":"
SEMICOLON  : ";"
EQUAL : "="
LPAR : "("
RPAR : ")"

PLUS : "+"
MINUS : "-"
STAR : "*"
DIV :"/"
LESS: "<"
MORE: ">"
LEQ.2 : "<=" 
GEQ.2 : ">="
CMP.2 : "=="
NEQ.2 : "/="
AND : "&"
OR : "|"
NOT : "~"


variable : VARIABLE_CHARACTER+


expression_atom : variable
  | INT_LITERAL 
  | TRUE
  | FALSE
  | LAMBDA variable ARROW expression
  | IF expression THEN expression ELSE expression
  | LPAREN expression RPAREN
  | LPAREN expression COLON type RPAREN

expression_application : expression_atom 
  | expression_atom expression_atom+

expression_operator{operators,next_expression}: next_expression (operators next_expression)+
  | next_expression

multiplicative_operators: DIV | STAR

expression_multiplicative: expression_operator{multiplicative_operators,expression_application}

additive_operators: PLUS | MINUS

expression_additive: expression_operator{additive_operators, expression_multiplicative}

expression_order : expression_additive (LEQ | GEQ) expression_additive
  | expression_additive


comparative_operators: CMP | NEQ
expression_comparative : expression_operator{comparative_operators, expression_order}
  | expression_order

expression_not :  expression_operator{NOT,expression_comparative}


expression_and : expression_operator{AND, expression_not}

expression_or : expression_operator{OR,expression_and}

expression : expression_or

type_arrow : type (ARROW type)+
type : BOOl | INT_TYPE | UNIT_TYPE | type_arrow

variable_declaration : variable COLON type SEMICOLON

variables : variable+

variable_definition : variable EQUAL expression SEMICOLON
  | variable variables EQUAL expression SEMICOLON
